Sure, let's build a simple Express application that provides two API endpoints:

1. A POST method to capture a screenshot.
2. A GET method to return the difference between the last two screenshots (or specific ones if image IDs are provided).

### Step 1: Initialize Project

First, initialize your npm project if you haven't already:

```bash
mkdir screenshot-api
cd screenshot-api
npm init -y
```

### Step 2: Install Dependencies

Install the necessary packages:

```bash
npm install express puppeteer resemblejs node-cron
```

### Step 3: Create Directory Structure

Create the following directory structure:

```
screenshot-api
├── screenshots
├── index.js
├── screenshot.js
├── compare.js
```

### Step 4: Create `screenshot.js` for Taking Screenshots

```javascript
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const takeScreenshot = async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://github.com/');
  const screenshotPath = path.join(__dirname, 'screenshots', `screenshot-${new Date().toISOString().split('T')[0]}.png`);
  await page.screenshot({ path: screenshotPath });
  await browser.close();
  return screenshotPath;
};

const ensureDirectoryExistence = (filePath) => {
  const dirname = path.dirname(filePath);
  if (fs.existsSync(dirname)) {
    return true;
  }
  ensureDirectoryExistence(dirname);
  fs.mkdirSync(dirname);
};

ensureDirectoryExistence(path.join(__dirname, 'screenshots'));

module.exports = takeScreenshot;
```

### Step 5: Create `compare.js` for Comparing Screenshots

```javascript
const fs = require('fs');
const path = require('path');
const resemble = require('resemblejs');

const compareScreenshots = (image1, image2) => {
  return new Promise((resolve, reject) => {
    const image1Path = path.join(__dirname, 'screenshots', image1);
    const image2Path = path.join(__dirname, 'screenshots', image2);

    if (!fs.existsSync(image1Path) || !fs.existsSync(image2Path)) {
      reject(new Error('One or both images do not exist.'));
      return;
    }

    const img1 = fs.readFileSync(image1Path);
    const img2 = fs.readFileSync(image2Path);

    resemble(img1)
      .compareTo(img2)
      .onComplete((data) => {
        resolve(data);
      });
  });
};

module.exports = compareScreenshots;
```

### Step 6: Create `index.js` to Set Up Express Server and API Endpoints

```javascript
const express = require('express');
const fs = require('fs');
const path = require('path');
const takeScreenshot = require('./screenshot');
const compareScreenshots = require('./compare');

const app = express();
const port = 3000;

// POST endpoint to capture a screenshot
app.post('/capture', async (req, res) => {
  try {
    const screenshotPath = await takeScreenshot();
    res.status(200).send(`Screenshot saved at ${screenshotPath}`);
  } catch (error) {
    res.status(500).send(`Error capturing screenshot: ${error.message}`);
  }
});

// GET endpoint to compare screenshots
app.get('/compare', async (req, res) => {
  try {
    const screenshotsDir = path.join(__dirname, 'screenshots');
    const files = fs.readdirSync(screenshotsDir).filter(file => file.endsWith('.png')).sort();
    
    let image1, image2;
    if (req.query.image1 && req.query.image2) {
      image1 = req.query.image1;
      image2 = req.query.image2;
    } else if (files.length >= 2) {
      image1 = files[files.length - 2];
      image2 = files[files.length - 1];
    } else {
      res.status(400).send('Not enough screenshots to compare.');
      return;
    }

    const result = await compareScreenshots(image1, image2);
    res.status(200).json({
      image1,
      image2,
      misMatchPercentage: result.misMatchPercentage,
      analysisTime: result.analysisTime,
    });
  } catch (error) {
    res.status(500).send(`Error comparing screenshots: ${error.message}`);
  }
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
```

### Step 7: Run the Application

Run your application:

```bash
node index.js
```

### Using the API

- **To capture a screenshot:**

```bash
curl -X POST http://localhost:3000/capture
```

- **To compare the last two screenshots:**

```bash
curl -X GET http://localhost:3000/compare
```

- **To compare specific screenshots:**

```bash
curl -X GET "http://localhost:3000/compare?image1=screenshot-2023-05-18.png&image2=screenshot-2023-05-19.png"
```

This setup provides an API to capture screenshots of a specified URL and compare them using `resemble.js`. The results of the comparison, including the percentage difference, will be returned as JSON.